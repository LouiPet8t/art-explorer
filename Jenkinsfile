pipeline {
    agent any
    
    agent { label 'built-in' }
    
    environment {
        DOCKER_IMAGE = 'chicago-art-explorer'
        DOCKER_TAG = "${BUILD_NUMBER}"
        PROD_SERVER = '192.168.56.20'
        DEPLOY_USER = 'deploy'
        NOTIFICATION_EMAIL = 'votre-email@example.com'
    }
    
    stages {
        stage('üîÑ R√©cup√©ration du code') {
            steps {
                echo 'üì• R√©cup√©ration du code source depuis Git...'
                checkout scm
                
                echo 'üìã Informations du build:'
                sh 'echo "Build: ${BUILD_NUMBER}"'
                sh 'echo "Branch: ${GIT_BRANCH}"'
                sh 'pwd && ls -la'
            }
        }
        
        stage('üß™ Tests unitaires') {
            steps {
                echo 'üß™ Ex√©cution des tests unitaires...'
                
                script {
                    try {
                        echo 'üèóÔ∏è Construction de l\'image de test...'
                        sh 'docker build -f Dockerfile.test -t ${DOCKER_IMAGE}-test:latest .'
                        
                        echo '‚ñ∂Ô∏è Ex√©cution des tests...'
                        sh '''
                            mkdir -p test-results
                            docker run --rm \
                                -v ${PWD}/test-results:/app/test-results \
                                ${DOCKER_IMAGE}-test:latest \
                                bash -c "coverage run -m pytest --junitxml=test-results/results.xml -v && coverage report && coverage html -d test-results/htmlcov"
                        '''
                        
                        echo '‚úÖ Tests r√©ussis !'
                        
                    } catch (Exception e) {
                        echo "‚ùå Erreur lors des tests: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Les tests unitaires ont √©chou√©")
                    }
                }
            }
            post {
                always {
                    // Publication des r√©sultats de test
                    publishTestResults testResultsPattern: 'test-results/results.xml'
                    
                    // Publication du rapport de couverture
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'test-results/htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Rapport de Couverture'
                    ])
                }
            }
        }
        
        stage('üê≥ Construction image Docker') {
            steps {
                echo 'üê≥ Construction de l\'image Docker de production...'
                
                script {
                    try {
                        sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                        sh 'docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest'
                        
                        echo "‚úÖ Image construite: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        
                        // Afficher les images disponibles
                        sh 'docker images | grep ${DOCKER_IMAGE}'
                        
                    } catch (Exception e) {
                        echo "‚ùå Erreur lors de la construction: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("La construction de l'image Docker a √©chou√©")
                    }
                }
            }
        }
        
        stage('üîç Test de l\'image') {
            steps {
                echo 'üîç Test de fonctionnement de l\'image Docker...'
                
                script {
                    try {
                        echo 'üöÄ D√©marrage du conteneur de test...'
                        sh '''
                            # D√©marrage du conteneur en arri√®re-plan
                            docker run -d --name test-container-${BUILD_NUMBER} -p 8001:8000 ${DOCKER_IMAGE}:${DOCKER_TAG}
                            
                            # Attente du d√©marrage
                            echo "‚è≥ Attente du d√©marrage de l'application..."
                            sleep 15
                            
                            # Test de la r√©ponse HTTP
                            echo "üåê Test de la r√©ponse HTTP..."
                            curl -f http://localhost:8001/ || exit 1
                            
                            echo "‚úÖ Application fonctionne correctement !"
                        '''
                        
                    } catch (Exception e) {
                        echo "‚ùå Erreur lors du test: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Le test de l'image Docker a √©chou√©")
                    } finally {
                        // Nettoyage du conteneur de test
                        sh 'docker stop test-container-${BUILD_NUMBER} || true'
                        sh 'docker rm test-container-${BUILD_NUMBER} || true'
                    }
                }
            }
        }
        
        stage('üöÄ D√©ploiement Production') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                echo 'üöÄ D√©ploiement en production...'
                
                script {
                    try {
                        echo 'üíæ Sauvegarde de l\'image Docker...'
                        sh 'docker save ${DOCKER_IMAGE}:${DOCKER_TAG} | gzip > chicago-art-explorer-${BUILD_NUMBER}.tar.gz'
                        
                        echo 'üì§ Transfert vers le serveur de production...'
                        sshagent(credentials: ['prod-server-ssh']) {
                            // V√©rification de la connexion
                            sh 'ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${PROD_SERVER} "echo \'üîó Connexion SSH √©tablie\'"'
                            
                            // Copie des fichiers
                            sh 'scp chicago-art-explorer-${BUILD_NUMBER}.tar.gz ${DEPLOY_USER}@${PROD_SERVER}:/tmp/'
                            sh 'scp scripts/deploy.sh ${DEPLOY_USER}@${PROD_SERVER}:/tmp/'
                            
                            // Ex√©cution du d√©ploiement
                            sh 'ssh ${DEPLOY_USER}@${PROD_SERVER} "chmod +x /tmp/deploy.sh && /tmp/deploy.sh ${BUILD_NUMBER}"'
                        }
                        
                        echo '‚è≥ V√©rification du d√©ploiement...'
                        sleep(20)
                        
                        // Test de l'application d√©ploy√©e
                        sh 'curl -f http://${PROD_SERVER}:8000/ || exit 1'
                        
                        echo "üéâ D√©ploiement r√©ussi ! Application disponible sur http://${PROD_SERVER}:8000"
                        
                    } catch (Exception e) {
                        echo "‚ùå Erreur lors du d√©ploiement: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Le d√©ploiement a √©chou√©")
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage des ressources...'
            // Nettoyage des images Docker locales
            sh '''
                docker rmi ${DOCKER_IMAGE}-test:latest || true
                docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                rm -f chicago-art-explorer-${BUILD_NUMBER}.tar.gz || true
            '''
        }
        
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
            script {
                // Notification de succ√®s
                if (env.NOTIFICATION_EMAIL && env.NOTIFICATION_EMAIL != 'votre-email@example.com') {
                    emailext (
                        subject: "‚úÖ [Jenkins] Succ√®s: Chicago Art Explorer - Build ${env.BUILD_NUMBER}",
                        body: """
                            üéâ Le d√©ploiement de Chicago Art Explorer s'est d√©roul√© avec succ√®s !
                            
                            üìä D√©tails du build:
                            ‚Ä¢ Job: ${env.JOB_NAME}
                            ‚Ä¢ Build: ${env.BUILD_NUMBER}
                            ‚Ä¢ Branch: ${env.GIT_BRANCH}
                            ‚Ä¢ Status: SUCC√àS
                            
                            üåê Application disponible sur: http://${PROD_SERVER}:8000
                            üìã Logs complets: ${env.BUILD_URL}console
                            
                            üöÄ Bonne utilisation !
                        """,
                        to: env.NOTIFICATION_EMAIL
                    )
                }
            }
        }
        
        failure {
            echo '‚ùå Pipeline √©chou√© !'
            script {
                // Notification d'√©chec
                if (env.NOTIFICATION_EMAIL && env.NOTIFICATION_EMAIL != 'votre-email@example.com') {
                    emailext (
                        subject: "‚ùå [Jenkins] √âchec: Chicago Art Explorer - Build ${env.BUILD_NUMBER}",
                        body: """
                            üí• Le d√©ploiement de Chicago Art Explorer a √©chou√© !
                            
                            üìä D√©tails du build:
                            ‚Ä¢ Job: ${env.JOB_NAME}
                            ‚Ä¢ Build: ${env.BUILD_NUMBER}
                            ‚Ä¢ Branch: ${env.GIT_BRANCH}
                            ‚Ä¢ Status: √âCHEC
                            
                            üîç Consulter les logs pour plus de d√©tails: ${env.BUILD_URL}console
                            
                            üõ†Ô∏è Action requise pour corriger le probl√®me.
                        """,
                        to: env.NOTIFICATION_EMAIL
                    )
                }
            }
        }
    }
}